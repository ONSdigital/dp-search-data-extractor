// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-api-clients-go/v2/dataset"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	"github.com/ONSdigital/dp-search-data-extractor/clients"
	"sync"
)

var (
	lockDatasetClientMockChecker    sync.RWMutex
	lockDatasetClientMockGetEdition sync.RWMutex
)

// Ensure, that DatasetClientMock does implement DatasetClient.
// If this is not the case, regenerate this file with moq.
var _ clients.DatasetClient = &DatasetClientMock{}

// DatasetClientMock is a mock implementation of clients.DatasetClient.
//
//     func TestSomethingThatUsesDatasetClient(t *testing.T) {
//
//         // make and configure a mocked clients.DatasetClient
//         mockedDatasetClient := &DatasetClientMock{
//             CheckerFunc: func(in1 context.Context, in2 *healthcheck.CheckState) error {
// 	               panic("mock out the Checker method")
//             },
//             GetEditionFunc: func(ctx context.Context, userAuthToken string, serviceAuthToken string, collectionID string, datasetID string, edition string) (dataset.Edition, error) {
// 	               panic("mock out the GetEdition method")
//             },
//         }
//
//         // use mockedDatasetClient in code that requires clients.DatasetClient
//         // and then make assertions.
//
//     }
type DatasetClientMock struct {
	// CheckerFunc mocks the Checker method.
	CheckerFunc func(in1 context.Context, in2 *healthcheck.CheckState) error

	// GetEditionFunc mocks the GetEdition method.
	GetEditionFunc func(ctx context.Context, userAuthToken string, serviceAuthToken string, collectionID string, datasetID string, edition string) (dataset.Edition, error)

	// calls tracks calls to the methods.
	calls struct {
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *healthcheck.CheckState
		}
		// GetEdition holds details about calls to the GetEdition method.
		GetEdition []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserAuthToken is the userAuthToken argument value.
			UserAuthToken string
			// ServiceAuthToken is the serviceAuthToken argument value.
			ServiceAuthToken string
			// CollectionID is the collectionID argument value.
			CollectionID string
			// DatasetID is the datasetID argument value.
			DatasetID string
			// Edition is the edition argument value.
			Edition string
		}
	}
}

// Checker calls CheckerFunc.
func (mock *DatasetClientMock) Checker(in1 context.Context, in2 *healthcheck.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("DatasetClientMock.CheckerFunc: method is nil but DatasetClient.Checker was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *healthcheck.CheckState
	}{
		In1: in1,
		In2: in2,
	}
	lockDatasetClientMockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	lockDatasetClientMockChecker.Unlock()
	return mock.CheckerFunc(in1, in2)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//     len(mockedDatasetClient.CheckerCalls())
func (mock *DatasetClientMock) CheckerCalls() []struct {
	In1 context.Context
	In2 *healthcheck.CheckState
} {
	var calls []struct {
		In1 context.Context
		In2 *healthcheck.CheckState
	}
	lockDatasetClientMockChecker.RLock()
	calls = mock.calls.Checker
	lockDatasetClientMockChecker.RUnlock()
	return calls
}

// GetEdition calls GetEditionFunc.
func (mock *DatasetClientMock) GetEdition(ctx context.Context, userAuthToken string, serviceAuthToken string, collectionID string, datasetID string, edition string) (dataset.Edition, error) {
	if mock.GetEditionFunc == nil {
		panic("DatasetClientMock.GetEditionFunc: method is nil but DatasetClient.GetEdition was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
		CollectionID     string
		DatasetID        string
		Edition          string
	}{
		Ctx:              ctx,
		UserAuthToken:    userAuthToken,
		ServiceAuthToken: serviceAuthToken,
		CollectionID:     collectionID,
		DatasetID:        datasetID,
		Edition:          edition,
	}
	lockDatasetClientMockGetEdition.Lock()
	mock.calls.GetEdition = append(mock.calls.GetEdition, callInfo)
	lockDatasetClientMockGetEdition.Unlock()
	return mock.GetEditionFunc(ctx, userAuthToken, serviceAuthToken, collectionID, datasetID, edition)
}

// GetEditionCalls gets all the calls that were made to GetEdition.
// Check the length with:
//     len(mockedDatasetClient.GetEditionCalls())
func (mock *DatasetClientMock) GetEditionCalls() []struct {
	Ctx              context.Context
	UserAuthToken    string
	ServiceAuthToken string
	CollectionID     string
	DatasetID        string
	Edition          string
} {
	var calls []struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
		CollectionID     string
		DatasetID        string
		Edition          string
	}
	lockDatasetClientMockGetEdition.RLock()
	calls = mock.calls.GetEdition
	lockDatasetClientMockGetEdition.RUnlock()
	return calls
}
