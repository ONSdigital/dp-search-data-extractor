// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	"github.com/ONSdigital/dp-search-data-extractor/clients"
	"sync"
)

// Ensure, that ZebedeeClientMock does implement clients.ZebedeeClient.
// If this is not the case, regenerate this file with moq.
var _ clients.ZebedeeClient = &ZebedeeClientMock{}

// ZebedeeClientMock is a mock implementation of clients.ZebedeeClient.
//
//	func TestSomethingThatUsesZebedeeClient(t *testing.T) {
//
//		// make and configure a mocked clients.ZebedeeClient
//		mockedZebedeeClient := &ZebedeeClientMock{
//			CheckerFunc: func(contextMoqParam context.Context, checkState *healthcheck.CheckState) error {
//				panic("mock out the Checker method")
//			},
//			GetPublishedDataFunc: func(ctx context.Context, uriString string) ([]byte, error) {
//				panic("mock out the GetPublishedData method")
//			},
//		}
//
//		// use mockedZebedeeClient in code that requires clients.ZebedeeClient
//		// and then make assertions.
//
//	}
type ZebedeeClientMock struct {
	// CheckerFunc mocks the Checker method.
	CheckerFunc func(contextMoqParam context.Context, checkState *healthcheck.CheckState) error

	// GetPublishedDataFunc mocks the GetPublishedData method.
	GetPublishedDataFunc func(ctx context.Context, uriString string) ([]byte, error)

	// calls tracks calls to the methods.
	calls struct {
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CheckState is the checkState argument value.
			CheckState *healthcheck.CheckState
		}
		// GetPublishedData holds details about calls to the GetPublishedData method.
		GetPublishedData []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UriString is the uriString argument value.
			UriString string
		}
	}
	lockChecker          sync.RWMutex
	lockGetPublishedData sync.RWMutex
}

// Checker calls CheckerFunc.
func (mock *ZebedeeClientMock) Checker(contextMoqParam context.Context, checkState *healthcheck.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("ZebedeeClientMock.CheckerFunc: method is nil but ZebedeeClient.Checker was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		CheckState      *healthcheck.CheckState
	}{
		ContextMoqParam: contextMoqParam,
		CheckState:      checkState,
	}
	mock.lockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	mock.lockChecker.Unlock()
	return mock.CheckerFunc(contextMoqParam, checkState)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//
//	len(mockedZebedeeClient.CheckerCalls())
func (mock *ZebedeeClientMock) CheckerCalls() []struct {
	ContextMoqParam context.Context
	CheckState      *healthcheck.CheckState
} {
	var calls []struct {
		ContextMoqParam context.Context
		CheckState      *healthcheck.CheckState
	}
	mock.lockChecker.RLock()
	calls = mock.calls.Checker
	mock.lockChecker.RUnlock()
	return calls
}

// GetPublishedData calls GetPublishedDataFunc.
func (mock *ZebedeeClientMock) GetPublishedData(ctx context.Context, uriString string) ([]byte, error) {
	if mock.GetPublishedDataFunc == nil {
		panic("ZebedeeClientMock.GetPublishedDataFunc: method is nil but ZebedeeClient.GetPublishedData was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		UriString string
	}{
		Ctx:       ctx,
		UriString: uriString,
	}
	mock.lockGetPublishedData.Lock()
	mock.calls.GetPublishedData = append(mock.calls.GetPublishedData, callInfo)
	mock.lockGetPublishedData.Unlock()
	return mock.GetPublishedDataFunc(ctx, uriString)
}

// GetPublishedDataCalls gets all the calls that were made to GetPublishedData.
// Check the length with:
//
//	len(mockedZebedeeClient.GetPublishedDataCalls())
func (mock *ZebedeeClientMock) GetPublishedDataCalls() []struct {
	Ctx       context.Context
	UriString string
} {
	var calls []struct {
		Ctx       context.Context
		UriString string
	}
	mock.lockGetPublishedData.RLock()
	calls = mock.calls.GetPublishedData
	mock.lockGetPublishedData.RUnlock()
	return calls
}
