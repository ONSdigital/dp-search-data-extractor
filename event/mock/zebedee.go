// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-search-data-extractor/event"
	"sync"
)

var (
	lockZebedeeClientMockGetPublishedData sync.RWMutex
)

// Ensure, that ZebedeeClientMock does implement ZebedeeClient.
// If this is not the case, regenerate this file with moq.
var _ event.ZebedeeClient = &ZebedeeClientMock{}

// ZebedeeClientMock is a mock implementation of event.ZebedeeClient.
//
//     func TestSomethingThatUsesZebedeeClient(t *testing.T) {
//
//         // make and configure a mocked event.ZebedeeClient
//         mockedZebedeeClient := &ZebedeeClientMock{
//             GetPublishedDataFunc: func(ctx context.Context, uriString string) ([]byte, error) {
// 	               panic("mock out the GetPublishedData method")
//             },
//         }
//
//         // use mockedZebedeeClient in code that requires event.ZebedeeClient
//         // and then make assertions.
//
//     }
type ZebedeeClientMock struct {
	// GetPublishedDataFunc mocks the GetPublishedData method.
	GetPublishedDataFunc func(ctx context.Context, uriString string) ([]byte, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetPublishedData holds details about calls to the GetPublishedData method.
		GetPublishedData []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UriString is the uriString argument value.
			UriString string
		}
	}
}

// GetPublishedData calls GetPublishedDataFunc.
func (mock *ZebedeeClientMock) GetPublishedData(ctx context.Context, uriString string) ([]byte, error) {
	if mock.GetPublishedDataFunc == nil {
		panic("ZebedeeClientMock.GetPublishedDataFunc: method is nil but ZebedeeClient.GetPublishedData was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		UriString string
	}{
		Ctx:       ctx,
		UriString: uriString,
	}
	lockZebedeeClientMockGetPublishedData.Lock()
	mock.calls.GetPublishedData = append(mock.calls.GetPublishedData, callInfo)
	lockZebedeeClientMockGetPublishedData.Unlock()
	return mock.GetPublishedDataFunc(ctx, uriString)
}

// GetPublishedDataCalls gets all the calls that were made to GetPublishedData.
// Check the length with:
//     len(mockedZebedeeClient.GetPublishedDataCalls())
func (mock *ZebedeeClientMock) GetPublishedDataCalls() []struct {
	Ctx       context.Context
	UriString string
} {
	var calls []struct {
		Ctx       context.Context
		UriString string
	}
	lockZebedeeClientMockGetPublishedData.RLock()
	calls = mock.calls.GetPublishedData
	lockZebedeeClientMockGetPublishedData.RUnlock()
	return calls
}
