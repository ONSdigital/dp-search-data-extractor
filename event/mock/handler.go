// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-search-data-extractor/config"
	"github.com/ONSdigital/dp-search-data-extractor/event"
	"github.com/ONSdigital/dp-search-data-extractor/models"
	"sync"
)

var (
	lockHandlerMockHandle sync.RWMutex
)

// Ensure, that HandlerMock does implement Handler.
// If this is not the case, regenerate this file with moq.
var _ event.Handler = &HandlerMock{}

// HandlerMock is a mock implementation of event.Handler.
//
//     func TestSomethingThatUsesHandler(t *testing.T) {
//
//         // make and configure a mocked event.Handler
//         mockedHandler := &HandlerMock{
//             HandleFunc: func(ctx context.Context, contentPublished *models.ContentPublished, keywordsLimit int, cfg config.Config) error {
// 	               panic("mock out the Handle method")
//             },
//         }
//
//         // use mockedHandler in code that requires event.Handler
//         // and then make assertions.
//
//     }
type HandlerMock struct {
	// HandleFunc mocks the Handle method.
	HandleFunc func(ctx context.Context, contentPublished *models.ContentPublished, keywordsLimit int, cfg config.Config) error

	// calls tracks calls to the methods.
	calls struct {
		// Handle holds details about calls to the Handle method.
		Handle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ContentPublished is the contentPublished argument value.
			ContentPublished *models.ContentPublished
			// KeywordsLimit is the keywordsLimit argument value.
			KeywordsLimit int
			// Cfg is the cfg argument value.
			Cfg config.Config
		}
	}
}

// Handle calls HandleFunc.
func (mock *HandlerMock) Handle(ctx context.Context, contentPublished *models.ContentPublished, keywordsLimit int, cfg config.Config) error {
	if mock.HandleFunc == nil {
		panic("HandlerMock.HandleFunc: method is nil but Handler.Handle was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		ContentPublished *models.ContentPublished
		KeywordsLimit    int
		Cfg              config.Config
	}{
		Ctx:              ctx,
		ContentPublished: contentPublished,
		KeywordsLimit:    keywordsLimit,
		Cfg:              cfg,
	}
	lockHandlerMockHandle.Lock()
	mock.calls.Handle = append(mock.calls.Handle, callInfo)
	lockHandlerMockHandle.Unlock()
	return mock.HandleFunc(ctx, contentPublished, keywordsLimit, cfg)
}

// HandleCalls gets all the calls that were made to Handle.
// Check the length with:
//     len(mockedHandler.HandleCalls())
func (mock *HandlerMock) HandleCalls() []struct {
	Ctx              context.Context
	ContentPublished *models.ContentPublished
	KeywordsLimit    int
	Cfg              config.Config
} {
	var calls []struct {
		Ctx              context.Context
		ContentPublished *models.ContentPublished
		KeywordsLimit    int
		Cfg              config.Config
	}
	lockHandlerMockHandle.RLock()
	calls = mock.calls.Handle
	lockHandlerMockHandle.RUnlock()
	return calls
}
